import json
from dotenv import load_dotenv
import os
from groq import Groq

load_dotenv()

def generate_html(prompt):
  return "some html stuff goes here"

def generate_css(html_code, prompt):
  return "some css stuff goes here"

class Agent:
  def __init__(self, client, tools_list):
    self.client = client
    self.system = """
      You are a project manager with a knack for design sense and love for beautiful landing pages. 
      Given a user's task, you must work in a process following the loop of Thought, Action, Observation, 
      to produce what the user wants. At the end of the loop, you output a final Answer.

      You must understand the task the user is asking of you, and generate code that perfectly fits 
      their request in accordance with your abilities.

      Below are your available actions:

      ## 1. generate_css
      ### Input parameters:
      1. html_code: string [The HTML code you have generated]
      2. prompt_design: string [A prompt specifying how to style the HTML code]
      ### Output: A multi-line string containing complete CSS

      ## 2. generate_html
      ### Input parameters:
      1. prompt: string [A prompt specifying the complete HTML structure to generate]
      ### Output: A multi-line string containing complete HTML

      ---

      Strict requirements for every output:

      1. **JSON Standardized Output**: Every single response must be a JSON object in the following format:

      {
        "stage": "thought" | "action" | "observation" | "final",
        "action": { "action_name": {"param1": "value1", "param2": "value2"} } | null,
        "thought": "..." | null,
        "observation": "..." | null,
        "final_output": {"html": "...", "css": "..."} | null
      }

      - For stages other than the current stage, set the respective field to `null`.  
      - `stage` must indicate the current stage.  
      - `action` is only non-null in the Action stage.  
      - `thought` is only non-null in the Thought stage.  
      - `observation` is only non-null in the Observation stage.  
      - `final_output` is only non-null in the Final stage.

      2. **One Stage Per Response**: You must output exactly one stage per response and then stop. 
        Wait for the next call to continue the process.

      3. **Tool Usage**: Only use the tools listed above. Do not invent new tools.

      ---

      ### EXAMPLE:

      User Input: "I want to create a futuristic landing page for my hackathon"

      1. Thought Stage:

      {
        "stage": "thought",
        "action": null,
        "thought": "The user wants a futuristic-themed landing page for a hackathon. I should first generate the HTML structure that fits this description.",
        "observation": null,
        "final_output": null
      }

      2. Action Stage (after Thought):

      {
        "stage": "action",
        "action": {"generate_html": {"prompt": "Create a futuristic landing page for a hackathon with a hero section, event description, and a call-to-action button saying 'Register Now'"}},
        "thought": null,
        "observation": null,
        "final_output": null
      }

      3. Observation Stage (after Action):

      {
        "stage": "observation",
        "action": null,
        "thought": null,
        "observation": "<HTML output generated by generate_html tool>",
        "final_output": null
      }

      4. Thought Stage (after Observation):

      {
        "stage": "thought",
        "action": null,
        "thought": "Now that I have the HTML, I need to style it with a futuristic theme: dark background, neon-colored text and buttons, and modern fonts.",
        "observation": null,
        "final_output": null
      }

      5. Action Stage:

      {
        "stage": "action",
        "action": {"generate_css": {"html_code": "<HTML output from previous step>", "prompt_design": "Style the page with a dark background, neon text and buttons, futuristic fonts, and a sleek, modern look for a hackathon landing page"}},
        "thought": null,
        "observation": null,
        "final_output": null
      }

      6. Observation Stage:

      {
        "stage": "observation",
        "action": null,
        "thought": null,
        "observation": "<CSS output generated by generate_css tool>",
        "final_output": null
      }

      7. Final Stage:

      {
        "stage": "final",
        "action": null,
        "thought": null,
        "observation": null,
        "final_output": {
          "html": "<HTML output>",
          "css": "<CSS output>"
        }
      }
      """
    self.messages: list = []
    self.tools = {tool_name: tool_func for tool_name, tool_func in tools_list.items()}
    if self.system:
      self.messages.append({"role": "system", "content": self.system})
  
  def execute_loop(self):
    final_output = {}
    while True:
      llm_text = call_LLM_here(self.messages)
      llm_output = json.loads(llm_text)
      if llm_output["stage"] == "thought" or llm_output["stage"] == "observation":
        self.messages.append({"role": "assistant", "content": llm_text})
      elif llm_output["stage"] == "action":
        tool_output = self.run_tool(llm_output["action"])
        self.messages.append({"role": "assistant", "content": f"""{json.dumps(tool_output)}"""})
      elif llm_output["stage"] == "final":
        final_output = llm_output["final_output"]
        break
    return final_output

  def run_tool(self, tool_call):
    """
    tool_call: dict like {"generate_html": {"prompt": "Hello World"}}
    """
    for tool_name, params in tool_call.items():
        if tool_name not in self.tools:
            raise ValueError(f"Tool '{tool_name}' is not available.")
        
        func = self.tools[tool_name]  # get the actual function
        return func(**params)
        
  def __call__(self, user_input):
    if user_input:
      self.messages.append({"role": "user", "content": user_input})
    final_output = self.execute_loop()
    markdown_output = f"""
    # Code output
    ## User input: {user_input}
    ### HTML Code
    ```html\n{final_output["html"]}\n```\n
    ### CSS Code
    ```css\n{final_output["css"]}\n```\n
    """
    with open("output.md", "w") as f:
      f.write(markdown_output)

    print("Markdown with code snippet exported!")

client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
agent = Agent(client=client, tools_list={
    "generate_html": generate_html,
    "generate_css": generate_css
})
agent("Make me a beautiful landing page for my cat nursery")